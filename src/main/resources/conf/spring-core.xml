<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xsi:schemaLocation="http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-4.2.xsd
		http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">


	<!-- 一堆通知 -->
	<bean id="advices" class="com.xyqhit.logistics.aop.LogAop"></bean>

	<!--aop动态代理 -->
	<aop:config proxy-target-class="true">
		<!-- execution 固定写法 第一个* 方法返回 ,第二个* 代表包下的所有类,三个*代表类下的所有方法 ..代表方法的参数 -->
		<aop:aspect ref="advices" >
		<aop:pointcut expression="execution(* com.xyqhit.logistics.service.impl.*.*(..))"
			id="point" />
			<!--在bean包下所有的类的所有方法之前执行advices对象的before方法 -->
			<aop:before method="before" pointcut-ref="point" />
			<!--  -->
			<aop:after-throwing method="afterthrowing" pointcut-ref="point"/>
		</aop:aspect>
	</aop:config>

   <aop:aspectj-autoproxy/>


	<context:component-scan base-package="com.xyqhit.logistics.mapper;com.xyqhit.logistics.service;com.xyqhit.logistics.realm"></context:component-scan>	
	
	
	<context:property-placeholder location="classpath:conf/jdbc.prep,classpath:conf/redis.properties"></context:property-placeholder>
	
	
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
	<property name="driverClassName" value="${jdbc.driver}"></property>
	<property name="url" value="${jdbc.url}"></property>
	<property name="username" value="${jdbc.name}"></property>
	<property name="password" value="${jdbc.pass}"></property>
	</bean>
	
	<bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	<property name="dataSource" ref="dataSource"></property>
	<property value="com.xyqhit.logistics.mapper.*.xml" name="mapperLocations"/>
	<property value="com.xyqhit.logistics.pojo" name="typeAliasesPackage"/>
	</bean>
	
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<tx:annotation-driven transaction-manager="transactionManager"></tx:annotation-driven>
	
	
	 <!-- Redis 连接池 -->
    <bean id="jedisPool" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxTotal" value="${redis.pool.maxActive}" />
        <property name="maxIdle" value="${redis.pool.maxIdle}" />
        <property name="testOnBorrow" value="${redis.pool.testOnBorrow}" />
        <property name="testOnReturn" value="${redis.pool.testOnReturn}" />
        <property name="maxWaitMillis" value="${redis.pool.maxWait}" />
    </bean>

    <!-- Redis 连接工厂 -->
    <bean id="redisConnFactory"
        class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <property name="hostName" value="${redis.ip}" />
        <property name="port" value="${redis.port}" />
        <!-- property name="password" value="${redis.password}" -->
        <property name="timeout" value="${redis.timeout}" />
        <property name="poolConfig" ref="jedisPool" />
    </bean>

    <!-- redis 操作对象 -->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="redisConnFactory" />
        <!--     如果不配置Serializer，那么存储的时候只能使用String，如果用对象类型存储，那么会提示错误 can't cast to String！！！-->  
        <property name="keySerializer">  
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>  
        </property>  
        <property name="valueSerializer">  
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>  
        </property>  
        <!--开启事务-->  
        <property name="enableTransactionSupport" value="true"/>  
    </bean>
	
	
	 <!-- ehCache 配置管理器 -->
    <bean id="ehcacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
        <property name="configLocation" value="classpath:conf/ehcache.xml" />
        <!--true:单例，一个cacheManager对象共享；false：多个对象独立  -->
        <property name="shared" value="true" />
        <property name="cacheManagerName" value="ehcacheManager" />
    </bean>

    <!-- ehCache 操作对象 -->
    <bean id="ehCache" class="org.springframework.cache.ehcache.EhCacheFactoryBean">
       <property name="cacheName" value="ehCache"/>
       <property name="cacheManager" ref="ehcacheManager"/>
    </bean>
    
    
    <bean id="ehRedisCacheManager" class="org.springframework.cache.support.SimpleCacheManager">  
        <property name="caches">  
            <set>  
               <bean  id="ehRedisCache" class="com.xyqhit.logistics.cache.EhRedis">  
                     <property name="redisTemplate" ref="redisTemplate" />  
                     <property name="ehCache" ref="ehCache"/> 
                     <property name="name" value="userCache"/> 
                <!-- <property name="liveTime" value="3600"/>  --> 
                </bean>
            </set>  
        </property>  
    </bean>  
    
    <cache:annotation-driven cache-manager="ehRedisCacheManager" proxy-target-class="true"/>
	
	<bean id="logidrealm" class="com.xyqhit.logistics.realm.LoginRealm">
	<property name="credentialsMatcher">
	<bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
	<!-- 哈希算法名称 加密方式 -->
	<property name="hashAlgorithmName" value="MD5"></property>
	<!-- 指定加密次数 -->
	<property name="hashIterations" value="1024"></property>
	<!-- shiro缓存 -->
	</bean>
	</property>
	</bean>
	
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
	<property name="realms">
	<list>
	<ref bean="logidrealm"></ref>
	</list>
	</property>
	</bean>
	<!-- 可以自动调用配置在spring ioc容器中的shiro bean的生命周期方法    shiro生命周期处理器-->
   <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"></bean>
    <!-- 启用ioc容器中shiro的注解 但必须配置了lifecycleBeanPostProcessor后才能使用 -->
   <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"></bean>
   
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
	<!-- 注入安全管理器 -->
	<property name="securityManager" ref="securityManager"></property>
	<property name="loginUrl" value="/user/enter"></property>
	<property name="successUrl" value=""></property>
	<property name="unauthorizedUrl" value="/unauthorized"></property>
	<!-- 
    1.anon 可以被匿名访问
    2.authc必须认证之后才可以被访问，即登陆
     -->
     <property name="filterChainDefinitions">
     <value>
     <!-- 
    1.anon 可以被匿名访问
    2.authc必须认证之后才可以被访问，即登陆
    3./user路径下的必须注册用户才能访问
    4./admin路径下的必须系统管理员才能访问
     -->
     	/js/**=anon
     	/user/**=anon
        /back/**=roles[learder,department,director]
        /admin*/**=roles[director]
        /**=authc
     </value>
     </property>
	</bean>
		
		
		
</beans>